##stringtype C
##shortstrings
/***************************************************************************

 YAM - Yet Another Mailer
 Copyright (C) 1995-2000 Marcel Beck
 Copyright (C) 2000-2022 YAM Open Source Team

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 YAM Official Support Site :  http://www.yam.ch
 YAM OpenSource project    :  http://sourceforge.net/projects/yamos/

 $Id$

***************************************************************************/

// If this file is named 'Locale.c' it is automatically
// generated by 'FlexCat' from Locale_c.sd.
// PLEASE DO NOT EDIT!!!

#include <proto/dos.h>
#include <proto/exec.h>
#include <proto/locale.h>

#if !defined(__amigaos4__)
#include <proto/codesets.h>
#endif

#include "Locale.h"
#include "YAM.h"

#include "Debug.h"

struct fcstr %b_Strings[%n] =
{
  { %s, NULL, %d }%(,)
};

/*** Catalog functions ***/
/// Init%bCatalog()
void Init%bCatalog(void)
{
  int i;
  struct fcstr *fc;

  ENTER();

  // initialize all strings to their built-in default strings
  for(i=0, fc = (struct fcstr *)%b_Strings;  i < %n;  i++, fc++)
  {
    fc->msg = fc->defmsg;
  }

  LEAVE();
}

///
/// Open%bCatalog()
BOOL Open%bCatalog(void)
{
  BOOL retry = TRUE;
  BOOL expunged = FALSE;
  BOOL success = TRUE;
  struct fcstr *fc = NULL;
  int i = 0;

  ENTER();

  // now we try to open the catalog
  if(G->Locale != NULL && G->Catalog == NULL)
  {
    do
    {
      // try to open the catalog file in its
      // specified version.
      if(G->NoCatalogTranslation == FALSE)
      {
        G->Catalog = OpenCatalog(NULL,
                                 (STRPTR)"%b.catalog",
                                 OC_BuiltInLanguage, "english",
                                 OC_BuiltInCodeSet, 4, // 4 = iso-8859-1
                                 #if defined(__amigaos4__)
                                 OC_BuiltInVersion, %v,
                                 OC_PreferExternal, TRUE,
                                 #endif
                                 TAG_END);
      }

      // check if an error occurred.
      if(G->Catalog != NULL)
      {
        // now we check if the opened catalog has the correct version or not
        // and we don't care about revisions here.
        if(G->Catalog->cat_Version != %v)
        {
          W(DBF_STARTUP, "catalog version (%%%d) != required version (%v)", G->Catalog->cat_Version);

          // close the catalog immediately again
          // so that we fallback to the internal language
          CloseCatalog(G->Catalog);
          G->Catalog = NULL;

          if(expunged == FALSE)
          {
            // Expunge locale.library for the first try. This is not going to succeed directly,
            // because we still keep it opened. But trying to expunge it will let locale.library
            // expunge all unused catalogs, and this is what we are trying to archive here.
            RemLibrary((struct Library *)LocaleBase);
            D(DBF_STARTUP, "expunged locale.library");
            expunged = TRUE;
            retry = TRUE;
          }
          else
          {
            struct EasyStruct es;

            DisplayBeep(NULL);

            es.es_StructSize = sizeof(es);
            es.es_Flags      = 0;

            es.es_Title        = (STRPTR)"Incompatible %b.catalog version!";
            es.es_TextFormat   = (STRPTR)"YAM has found a translation catalog file in\\n"
                                         "your native language to be available. However,\\n"
                                         "it couldn't be activated as its version is\\n"
                                         "incompatible to version %v which YAM requires.\\n"
                                         "\\n"
                                         "Please check if there is a version %v of your\\n"
                                         "native catalog available or remove the old one.";
            es.es_GadgetFormat = (STRPTR)"Retry|Continue|Quit";

            switch(EasyRequestArgs(NULL, &es, NULL, NULL))
            {
              default:
              case 0: // quit
                retry = FALSE;
                success = FALSE;
              break;

              case 1: // retry
                retry = TRUE;
                expunged = FALSE;
              break;

              case 2: // continue
                retry = FALSE;
                success = TRUE;
              break;
            }
          }
        }
        else
        {
          D(DBF_STARTUP, "successfully opened %b.catalog v%%%d.%%%d (language: '%%%s', codeset: %%%d)", G->Catalog->cat_Version, G->Catalog->cat_Revision, G->Catalog->cat_Language, G->Catalog->cat_CodeSet);
          retry = FALSE;
          success = TRUE;
        }
      }
      else if(G->NoCatalogTranslation == FALSE)
      {
        // now we check the error state
        if(IoErr() != 0)
          W(DBF_STARTUP, "could not open '%b.catalog': IoErr: %%%d", IoErr());
        else
          W(DBF_STARTUP, "could not open '%b.catalog': builtin strings can be used");

        retry = FALSE;
      }
    }
    while(retry == TRUE);
  }
  else
    W(DBF_STARTUP, "locale.library was not open or catalog already opened.");

  // Retrieve the translated catalog strings and store them into fc->msg
  // G->Catalog might be NULL here which means the original strings will be
  // converted by GetCatalogStr() (e.g. conversion from UTF-8 -> local charset).
  if(G->Locale != NULL && G->Catalog != NULL)
  {
    for(i=0, fc = (struct fcstr *)%b_Strings;  i < %n;  i++, fc++)
    {
      const char *cs;

      cs = GetCatalogStr(G->Catalog, fc->id, (STRPTR)fc->defmsg);

      #if defined(__amigaos4__)
      // for AmigaOS4 locale.library has done the conversion from UTF8 to
      // the local charset already
      fc->msg = cs;
      #else
      // for all other systems we must do this ourself here
      fc->msg = CodesetsUTF8ToStr(CSA_Source, cs, TAG_DONE);
      #endif
    }
  }

  RETURN(success);
  return success;
}

///
/// Close%bCatalog()
void Close%bCatalog(void)
{
  int i;
  struct fcstr *fc;

  ENTER();

  for(i=0, fc = (struct fcstr *)%b_Strings;  i < %n;  i++, fc++)
  {
    if(fc->msg != NULL && fc->msg != fc->defmsg)
    {
      #if !defined(__amigaos4__)
      CodesetsFreeA((STRPTR)fc->msg, NULL);
      #endif
      fc->msg = fc->defmsg;
    }
  }

  if(G->Locale != NULL && G->Catalog != NULL)
  {
    CloseCatalog(G->Catalog);
    G->Catalog = NULL;
  }

  LEAVE();
}

///
